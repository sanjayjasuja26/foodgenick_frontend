
import Head from 'next/head'
import { Inter } from '@next/font/google'
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import Link from 'next/link'
const inter = Inter({ subsets: ['latin'] })
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUsers, getuserData } from '@/app/auth/store/LoginSlice';
import { useRouter } from 'next/router';
import 'react-toastify/dist/ReactToastify.css';
import { ToastContainer, toast } from 'react-toastify';
import Cookies from 'js-cookie';
import Image from 'next/image'
import ShowImg from '../../../public/assets/images/Show.svg'
import Hide from '../../../public/assets/images/Hide.svg'
import Modal from '@mui/material/Modal';
import close from '../../../public/assets/images/close.svg';
const validationSchema = Yup.object().shape({
  password: Yup.string().required(" Password is Required"),
  email: Yup.string().email("Invalid email").required(" Email is required"),
});

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
};

export default function Login() {
  const [show, setShow] = useState(false)
  const router = useRouter()
  const dispatch = useDispatch()
  const userData = useSelector(getuserData)
  console.log("userDatalogindata", userData)

  const toggle = () => {
    setShow(!show)
  }

  const [open, setOpen] = useState(false);
  const handleClose = () => {
    setOpen(false)
    router.push("/")
  };


  return (
    <>
      <Head>
        <title>Food Genic</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <main>

        <div>
          <Modal
            open={open}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
          >

            <Box sx={style}>
              <button onClick={handleClose} className='absolute top-2 right-1'>
                <Image
                  alt="close"
                  src={close}
                  className='inline-block mr-3.5 ' />

              </button>
              <Typography className='text-2xl font-semibold' id="modal-modal-title" variant="h6" component="h2">
                Welcome {userData?.user?.data?.user?.firstname} {userData?.user?.data?.user?.lastName}
              </Typography>
            </Box>
          </Modal>
        </div>

        <section className='lg:pt-24 xl:pb-52	lg:pb-0 relative md:pt-16	pt-12 mb-28 md:mb-0'>
          <div className='lg:max-w-xxxl md:max-w-xxxl mx-auto px-3.5 relative'>
            <h2 className="text-login font-poppins xl:text-6xl lg:text-5xl md:text-4xl font-bold text-dark lg:mb-5 md:mb-5 text-center z-10 relative lg:before:content-[attr(before)] before:absolute before:bg-login xl:before:h-52 xl:before:w-96 lg:before:h-52 md:before:h-20 lg:before:w-56 md:before:w-56 before:w-64 before:h-32 md:before:w-72 before:bg-10% before:bg-no-repeat xl:before:-top-14 before:-top-4 lg:before:-top-6 md:before:-top-3 before:-left-2.5 before:right-0 before:left-0 before:mx-auto before:-z-10 text-4xl pb-5 pt-5"><span className="text-yellow">Log</span>in</h2>
            <div className='py-7 xl:max-w-5xl xl:mx-auto bg-grey lg:p-8 rounded-lg	drop-shadow-sm border-t-2	border-black mt-4 md:py-9	relative z-10 mb-5'>
              <Formik
                initialValues={{ email: "", password: "" }}

                validationSchema={validationSchema}
                onSubmit={async (values) => {
                  if (values) {
                    const loginRes = await dispatch(fetchUsers(values))
                    console.log("loginRes", loginRes)
                    if (loginRes && loginRes.payload && loginRes.payload.success) {
                      toast.success(`${loginRes.payload.message}`)
                      Cookies.set("token", loginRes.payload.data.token);
                      Cookies.set("type", loginRes.payload.data.user.roleId);
                      setOpen(true)
                    } else {
                      toast.error(loginRes.payload.data.message)
                    }

                  }
                  console.log(values);
                }}
              >
                {({ errors, touched }) => (
                  <Form>
                    <div className='flex flex-wrap flex-col items-center'>
                      <div className='lg:w-2/4 md:w-2/4 w-full px-2.5 pb-6'>
                        <fieldset className='bg-white	rounded-md drop-shadow px-5	pt-2	pb-3 focus-within:border-b-2 border-b-yellow border-0'>
                          <legend className='font-poppins text-xs	bg-white rounded-xl	font-medium	px-2 py-1.5'>Email*</legend>
                          {/* <input type="text" placeholder="Company's Email*" className='border-0 bg-transparent outline-0 width-full'/> */}
                          <Field name="email" placeholder="Email*" className='border-0 bg-transparent outline-0 w-full' />
                        </fieldset>
                        <div className='text-red mt-1'>
                          <ErrorMessage name="email" />
                        </div>
                      </div>
                      <div className='lg:w-2/4 md:w-2/4 w-full px-2.5 pb-2.5'>
                        <fieldset className='bg-white	rounded-md drop-shadow px-5	pt-2	pb-3 focus-within:border-b-2 border-b-yellow border-0'>
                          <legend className='font-poppins text-xs	bg-white rounded-xl	font-medium	px-2 py-1.5'>Password*</legend>
                          <Field type={show ? "text" : "password"} name="password" placeholder="Password*" className='relative border-0 bg-transparent outline-0 w-full' />
                          {show ? <div className='absolute top-2 right-5 bottom-0' onClick={toggle}><Image src={Hide} alt="hide" /></div> : <div className='absolute top-2 right-5 bottom-0' onClick={toggle}><Image src={ShowImg} alt="show" /></div>}
                        </fieldset>
                        <div className='text-red mt-1'>
                          <ErrorMessage name="password" />
                        </div>
                      </div>
                      <Link href='/forgot' className='text-sm	underline lg:w-2/4 md:w-2/4 w-full pb-5 hover:text-yellow text-right	'>Forgot Password</Link>
                      <div className='text-center w-full'>
                        <button type="submit" className='font-poppins text-base font-semibold	bg-black hover:bg-yellow hover:text-white duration-700 hover:border-yellow text-white uppercase	inline-block py-3.5 px-12	rounded-md'>Submit</button>
                      </div>
                    </div>

                  </Form>
                )}
              </Formik>

            </div>
          </div>
        </section>
      </main>
      {/* <ToastContainer /> */}
    </>
  )
}
