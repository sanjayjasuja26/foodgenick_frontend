'use client'
import { useState, useEffect, useMemo } from "react";
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch, useSelector } from "react-redux";
import { ToastContainer, toast } from "react-toastify";
import AddBlogs from "@/components/forms/AddBlogs";
import { getAllBlogData, getBlogFunc, getBlogSliceData } from "@/app/auth/store/Slices/BlogSlice";
import DeleteBlog from "@/components/Modals/DeleteBlog";
import Image from 'next/image'
import bin2 from '../../../../../../public/assets/images/bin2.svg'
import plus from '../../../../../../public/assets/images/plus.svg'
import edit from '../../../../../../public/assets/images/edit.svg'
import Head from 'next/head'
export default function Restaurant() {
  const dispatch = useDispatch()
  const BlogStoreData = useSelector(getBlogSliceData)
  const selecter = useSelector(getAllBlogData)
  const memoizedSelectedData = useMemo(() => selecter, [selecter]);
  const [addBlogModal, setAddBlogModal] = useState(false)
  const [deleteBlogModal, setDeleteBlogModal] = useState(false)
  const [selectedData, setSelectedData] = useState(null)
  const [isEdit, setIsEdit] = useState(false)
  let testArr = []
  for(let i = 0; i < memoizedSelectedData.length; i++){
    testArr.push(memoizedSelectedData[i])
  }
  useEffect(() => {
    dispatch(getBlogFunc())
  }, [dispatch])

  const handleClickOpen = ( ) => {
      setAddBlogModal(true);
      setSelectedData(null)
      setIsEdit(false)
  };


  const handleClickOpenEdit = (val,isEdit) => {
    if(val && isEdit){
      setAddBlogModal(true);
      setSelectedData(val)
      setIsEdit(true)
    }
  };






  const handleClickClose = () => {
    setAddBlogModal(false);
    dispatch(getBlogFunc())
    setIsEdit(false)
  };

  const deleteHandleClickOpen = (val) => {
    setDeleteBlogModal(true);
    setSelectedData(val)
  };

  const deleteHandleClickClose = () => {
    setDeleteBlogModal(false);
    dispatch(getBlogFunc())
  };


  return (
    <>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div className='content-area mt-4 xl:w-full lg:w-full md:w-full w-full h-70 overflow-hidden	'>
      <div className="flex justify-between items-center flex-wrap title-section px-8 py-4 bg-white rounded-xl shadow-light">
         
        <div className='title-section sm:w-auto w-full sm:mb-0 mb-2'>
          <h3 className='text-2xl font-bold'>Blogs</h3>
          <p className='text-base'>Welcome, Foodgienic </p>
        </div>
        <div className='icon-div flex justify-between mb-5 sm:w-auto	w-full'>
              <div className='icon-div flex justify-end' onClick={handleClickOpen}>
              <a href='#' className='duration-700 hover:bg-black ml-auto bg-orange flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2'>
              <Image src={plus} alt="delete" className="w-3.5	mr-2" width={10} /> Add Blog
              </a>
            </div>
        </div> 
      </div>
        {BlogStoreData && BlogStoreData.loading ?
        <div className="mb-3 mt-7">
          <h3 className='font-bold text-2xl mb-4 text-orange'>Data</h3>
          <TableContainer component={Paper} className='shadow-none'>
            <div className="px-8 bg-white shadow-light rounded-xl py-7">             
              <div className="overflow-y-scroll max-h-30">
                <Table sx={{ minWidth: 650 }} aria-label="simple table" className="overflow-x-scroll w-full happy">
                  <TableHead>
                    <TableRow className="bg-grey-light1">
                      <TableCell className="font-semibold text-sm text-orange font-poppins w-14	 text-left">S.No</TableCell>
                      <TableCell className="font-semibold text-sm	text-orange font-poppins text-left" align="right">Title</TableCell>
                      <TableCell className="font-semibold text-sm	text-orange font-poppins text-left" align="right">Descriptions</TableCell>
                      <TableCell className="font-semibold text-sm	text-orange font-poppins text-left" align="right">Image</TableCell>
                      <TableCell className="font-semibold text-sm	text-orange font-poppins text-left" align="right">Edit</TableCell>
                      <TableCell className="font-semibold text-sm	text-orange font-poppins text-left" align="right">Delete</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {testArr && testArr?.sort((a,b) => a.id - b.id)?.map((val, index) => {
                      return (
                        <TableRow className="odd:bg-white even:bg-grey-light1"
                          key={index}
                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                        >

                          <TableCell align="right" className="text-sm font-poppins text-lightgrey w-14 text-left">{val.id}</TableCell>
                          <TableCell align="right" className="text-sm font-poppins text-lightgrey  text-left">{val.title}</TableCell>
                          <TableCell align="right" className="text-sm font-poppins text-lightgrey text-left whitespace-nowrap	overflow-hidden	text-ellipsis	max-w-md">{val.description}</TableCell>
                          <TableCell align="right" className="text-sm font-poppins text-lightgrey text-left whitespace-nowrap	overflow-hidden	text-ellipsis	max-w-md">{val.image}</TableCell>
                          <TableCell align="right" className="text-sm font-poppins text-lightgrey text-left" onClick={() => handleClickOpenEdit(val,"isEdit")} >
                            <Image src={edit} alt="delete" className="w-4	mr-2 cursor-pointer	"/></TableCell>
                          <TableCell align="right" className="text-sm font-poppins text-lightgrey text-left" onClick={() => deleteHandleClickOpen(val)}><Image src={bin2} alt="delete" className="w-4	mr-2 cursor-pointer"/></TableCell>
                        </TableRow>


                      )

                    })}


                  </TableBody>
                </Table>
              </div>
            </div>
          </TableContainer>
          
        </div>:<h1>loading .....</h1>}
        <AddBlogs
          open={addBlogModal}
          onClose={handleClickClose}
          editBlogData={selectedData}
          isEdit={isEdit}
        />
        <DeleteBlog
          open={deleteBlogModal}
          onClose={deleteHandleClickClose}
          deleteBlogData={selectedData}
        />
         {/* <ToastContainer /> */}
      </div>
    </>
  )
}

Restaurant.getLayout = function getLayout(page) {
  return (
    <>
      {page}
    </>
  )
}
