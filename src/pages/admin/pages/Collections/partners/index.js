import { useState } from "react";
import AdminNAv from '@/components/forms/AdminNav';
import { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';
import { useDispatch, useSelector } from "react-redux";
import { updateAllDynamicData, getBlogData, getAllDynamicData, getPartnerData } from "@/app/auth/store/Slices/DynamicContentSlice";
import Dropzone from "react-dropzone";
import * as Yup from "yup";
import AWS from '../../../../../aws';
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import Image from 'next/image'
import camera from '../../../../../../public/assets/images/camera.svg'
import gallery from '../../../../../../public/assets/images/gallery.svg'
import bin from '../../../../../../public/assets/images/bin.svg'
import plus from '../../../../../../public/assets/images/plus.svg'
import Head from 'next/head'
// const validationSchema = Yup.object().shape({
//   partner_First_Section: Yup.object().shape({
//     BlogData: Yup.array()
//       .of(
//         Yup.object().shape({
//           first_title: Yup.string().required('title Required'),
//           first_descriptions: Yup.string().required("descriptions is required"),
//           first_Img: Yup.string().required(" image is required"),
//         })
//       )

//   })

// });

export default function Partners() {
  const [isOpen, setOpen] = useState(false);
  const userToggleForm = () => setOpen(!isOpen);
  const router = useRouter()
  const hideSidebar = isOpen ? 'xl:w-3/2 lg:w-3/4 md:w-3/5 w-full' : ' xl:w-full lg:w-full w-full';
  const dispatch = useDispatch();
  const selecter = useSelector(getPartnerData)

  console.log("selecterselecter",selecter)

const dataFromSelecter = {partners_page_sections:selecter}

console.log("dataFromSelecter",dataFromSelecter)

  const uploadImageToS3 = async (file) => {
    const uploadParams = {
      Bucket: 'rajatfoodgienic',
      Key: file.name,
      Body: file,
      ACL: 'public-read',
    };

    const s3 = new AWS.S3();

    try {
      const data = await s3.upload(uploadParams).promise();
      const imageUrl = data.Location;
      console.log('Image uploaded successfully:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      return file
    }
  };

  const initialValue = {
    partners_page_sections: {
    partner: [
        {
          image: '',
        },
        {
          image: '',
        }
     
      ],
      brand: [
        {
          image: '',
        },
        {
          image: '',
        }
     
      ],
      agency: [
        {
          image: '',
        },
        {
          image: '',
        }
     
      ],
    }
  }


  return (
    <>
    <Head>
        <title>Partners/Agencies</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div className={`ccontent-area mt-4 ${hideSidebar}`}>
        <div className='title-section px-8 py-4 bg-white rounded-xl shadow-light'>
          <h3 className='text-2xl font-bold'>Partners/Agencies</h3>
        </div>
        <div className='card1 w-full mb-5 rounded-lg  flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
          <Formik
             initialValues={dataFromSelecter ||initialValue}
            onSubmit={async (values) => {
              console.log("partners_page_sectionsconsole", values)
              if(values){
              try {
            
                const updatedPartner = await Promise.all(
                values.partners_page_sections.partner.map(
                  async (item) => {
                    const { image } = item;
                    const imageUrl = await uploadImageToS3(image);
                    return {
                      ...item,
                      image: imageUrl,
                    };
                  }
                )
              );
              console.log("partner=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", updatedPartner)
              const updatedBrand = await Promise.all(
                values.partners_page_sections.brand.map(
                  async (item) => {
                    const { image } = item;
                    const imageUrl = await uploadImageToS3(image);
                    return {
                      ...item,
                      image: imageUrl,
                    };
                  }
                )
              );
              console.log("partner=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", updatedBrand)
           

              const updatedAgency = await Promise.all(
                values.partners_page_sections.agency.map(
                  async (item) => {
                    const { image } = item;
                    const imageUrl = await uploadImageToS3(image);
                    return {
                      ...item,
                      image: imageUrl,
                    };
                  }
                )
              );

              console.log("partner=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", updatedAgency)
                const value = {
                  type: "partners_page_sections",
                  partners_page_sections: {
                      partner:updatedPartner,
                     brand: updatedBrand,
                    agency: updatedAgency,
                  }
                }; 
               
                const partnerRes = await dispatch(updateAllDynamicData(value));
                console.log("BlogData ", value);

                if (partnerRes && partnerRes.payload && partnerRes.payload.success) {
                  toast.success(`${partnerRes.payload.message}`)
                  dispatch(getAllDynamicData())
                  router.push("/admin/pages")
                } else {
                  toast.error(`${partnerRes.payload.data.message}`)
                }

              } catch (error) {
                console.error('Error:', error);
              }
            }
            }
            }
          >
            {(formikProps) => (
              <Form className="w-full">
                <div className="w-full">
                 <div className="mb-3 mt-7">
                  <h2 className="font-bold text-2xl mb-4 text-orange text-left"> Partners</h2>
                    <FieldArray name="partners_page_sections.partner">
                          {({ push, remove }) => (
                            <div>
                              <div className="flex justify-between flex-wrap">
                                {formikProps.values.partners_page_sections.partner.map((type, index) => (
                                  <div key={index} className="md:w-49%  w-full mb-4 bg-white p-6 rounded-lg">
                                    <div>
                                      <div>
                                        <label htmlFor={`image_${index}`} className="font-bold text-left w-full block">Image Upload:</label>
                                        <Field name={`partners_page_sections.partner[${index}].image`} >
                                          {({ form }) => (
                                            <Dropzone
                                              onDrop={(acceptedFiles) =>
                                                form.setFieldValue(
                                                  `partners_page_sections.partner[${index}].image`,
                                                  acceptedFiles[0]
                                                )
                                              }
                                            >
                                              {({ getRootProps, getInputProps }) => (
                                                <div {...getRootProps()} className="dropzone w-full	focus:outline-none">
                                                  <input {...getInputProps()} />
                                                  {form.values.partners_page_sections.partner[index].image ? (
                                                    <div className="relative w-full	border-2 border-gray-200 rounded h-44	">
                                                      {form.values.partners_page_sections.partner[index].image.path ?
                                                        <Image
                                                          src={URL.createObjectURL(
                                                            form.values.partners_page_sections.partner[index].image
                                                          )}
                                                          alt="uploaded"
                                                          height={172}
                                                          width={691}
                                                          className="uploaded-image rounded w-full h-full object-cover"
                                                        /> :
                                                        <Image
                                                          src={
                                                            form.values.partners_page_sections.partner[index].image
                                                          }
                                                          alt="uploaded"
                                                          height={172}
                                                          width={691}
                                                          className="uploaded-image rounded w-full h-full object-cover"
                                                        />}
                                                        <div className="-top-3 -right-3 absolute bg-grey-light h-8	w-8 flex rounded-full	border border-white items-center	justify-center">
                                                          <Image src={camera} alt="camera" className="w-4	"/>
                                                        </div>
                                                    </div>
                                                  ) : (
                                                    <div className="border-2 border-gray-200 bg-grey-light rounded p-2 mt-1 flex justify-center flex-col	items-center text-grey2 h-44">
                                                    <Image src={gallery} alt="gallery" className="w-20"/>
                                                    Drop image here and click to upload</div>
                                                  )}
                                                </div>
                                              )}
                                            </Dropzone>
                                          )}
                                        </Field>
                                        <div className="text-red">
                                          <ErrorMessage name={`partners_page_sections.partner[${index}].image`} />
                                        </div>
                                      </div>
                                    </div>
                                    <div className="flex justify-end">
                                      <button type="button" className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2" onClick={() => remove(index)}><Image src={bin} alt="delete" className="w-4	mr-2"/>Remove</button>
                                    </div>
                                  </div>
                                ))}
                              </div>
                              <div className="w-full mb-3 text-right">
                                <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2" onClick={() => push({ image: '' })}>
                                  <Image src={plus} alt="delete" className="w-3.5	mr-2"/> Add Partners
                                </button>
                              </div>
                            </div>
                          )}
                        </FieldArray>
                </div>

                <div className="mb-3 mt-7">
                  <h2 className="font-bold text-2xl mb-4 text-orange text-left"> Brand</h2>
                    <FieldArray name="partners_page_sections.brand">
                          {({ push, remove }) => (
                            <div className="flex flex-wrap justify-between">
                              {formikProps.values.partners_page_sections.brand.map((type, index) => (
                                <div key={index} className="md:w-49% w-full mb-6 bg-white p-6 rounded-lg">
                                  <div className="w-full flex flex-wrap justify-between">
                                    <div className="w-full">
                                      <label htmlFor={`image_${index}`} className="font-bold text-left w-full block">Image Upload:</label>
                                      <Field name={`partners_page_sections.brand[${index}].image`} >
                                        {({ form }) => (
                                          <Dropzone
                                            onDrop={(acceptedFiles) =>
                                              form.setFieldValue(
                                                `partners_page_sections.brand[${index}].image`,
                                                acceptedFiles[0]
                                              )
                                            }
                                          >
                                            {({ getRootProps, getInputProps }) => (
                                              <div {...getRootProps()} className="dropzone w-full focus:outline-none mt-1">
                                                <input {...getInputProps()} />
                                                {form.values.partners_page_sections.brand[index].image ? (
                                                  <div className="relative w-full border-2 border-gray-200 rounded h-44">
                                                    {form.values.partners_page_sections.brand[index].image.path ?
                                                      <Image
                                                        src={URL.createObjectURL(
                                                          form.values.partners_page_sections.brand[index].image
                                                        )}
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      /> :
                                                      <Image
                                                        src={
                                                          form.values.partners_page_sections.brand[index].image
                                                        }
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      />}
                                                      <div className="-top-3 -right-3 absolute bg-grey-light h-8 w-8 flex rounded-full border border-white items-center justify-center">
                                                        <Image src={camera} alt="camera" className="w-4	"/>
                                                      </div>
                                                  </div>
                                                ) : (
                                                  <div className="border-2 border-gray-200 bg-grey-light rounded p-2 mt-1 flex justify-center flex-col	items-center text-grey2 h-44">
                                                  <Image src={gallery} alt="gallery" className="w-20"/>
                                                  Drop image here and click to upload</div>
                                                )}
                                              </div>
                                            )}
                                          </Dropzone>
                                        )}
                                      </Field>
                                      <div className="text-red">
                                        <ErrorMessage name={`partners_page_sections.brand[${index}].image`} />
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex justify-end">
                                    <button type="button" className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2" onClick={() => remove(index)}> <Image src={bin} alt="delete" className="w-4	mr-2"/>Remove</button>
                                  </div>
                                </div>
                              ))}
                              <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2" onClick={() => push({ image: '' })}>
                              <Image src={plus} alt="delete" className="w-3.5	mr-2"/> Add Brand
                              </button>
                            </div>
                          )}
                        </FieldArray>
                </div>
               
                <div className="mb-3 mt-7">
                  <h2 className="font-bold text-2xl mb-4 text-orange text-left"> Agency</h2>
                    <FieldArray name="partners_page_sections.agency">
                          {({ push, remove }) => (
                            <div className="flex flex-wrap justify-between">
                              {formikProps.values.partners_page_sections.agency.map((type, index) => (
                                <div key={index} className="md:w-49% w-full mb-6 bg-white p-6 rounded-lg">
                                  <div>
                                    <div>
                                      <label htmlFor={`image_${index}`} className="font-bold text-left w-full block">Image Upload:</label>
                                      <Field name={`partners_page_sections.agency[${index}].image`} >
                                        {({ form }) => (
                                          <Dropzone
                                            onDrop={(acceptedFiles) =>
                                              form.setFieldValue(
                                                `partners_page_sections.agency[${index}].image`,
                                                acceptedFiles[0]
                                              )
                                            }
                                          >
                                            {({ getRootProps, getInputProps }) => (
                                              <div {...getRootProps()} className="dropzone w-full focus:outline-none mt-1">
                                                <input {...getInputProps()} />
                                                {form.values.partners_page_sections.agency[index].image ? (
                                                  <div className="relative w-full border-2 border-gray-200 rounded h-44">
                                                    {form.values.partners_page_sections.agency[index].image.path ?
                                                      <Image
                                                        src={URL.createObjectURL(
                                                          form.values.partners_page_sections.agency[index].image
                                                        )}
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      /> :
                                                      <Image
                                                        src={
                                                          form.values.partners_page_sections.agency[index].image
                                                        }
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      />}
                                                      <div className="-top-3 -right-3 absolute bg-grey-light h-8 w-8 flex rounded-full border border-white items-center justify-center">
                                                      <Image src={camera} alt="camera" className="w-4	"/>
                                                    </div>
                                                  </div>
                                                ) : (
                                                  <div className="border-2 border-gray-200 bg-grey-light rounded p-2 mt-1 flex justify-center flex-col	items-center text-grey2 h-44">
                                                  <Image src={gallery} alt="gallery" className="w-20"/>
                                                  Drop image here and click to upload</div> 
                                                )}
                                              </div>
                                            )}
                                          </Dropzone>
                                        )}
                                      </Field>
                                      <div className="text-red">
                                        <ErrorMessage name={`partners_page_sections.agency[${index}].image`} />
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex justify-end">
                                    <button type="button" className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2" onClick={() => remove(index)}><Image src={bin} alt="delete" className="w-4	mr-2"/> Remove</button>
                                  </div>
                                </div>
                              ))}
                              <div className="w-full mb-3 text-right">
                                <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2" onClick={() => push({ image: '' })}>
                                <Image src={plus} alt="delete" className="w-3.5	mr-2"/> Add Agency
                                </button>
                              </div>
                            </div>
                          )}
                        </FieldArray>
                </div>



                </div>
                <div className="flex justify-center p-8">
                  <button type="submit" className="bg-orange border	border-orange px-11 py-2 text-white rounded-3xl text-lg hover:bg-white hover:text-orange duration-700">Submit</button>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>
    </>
  )
}

Partners.getLayout = function getLayout(page) {
  return (
    <>
      {page}
    </>
  )
}


