import { useState } from "react";
import AdminNAv from '@/components/forms/AdminNav';
import { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';
import { useDispatch, useSelector } from "react-redux";
import { updateAllDynamicData, getHomeData, getAllDynamicData } from "@/app/auth/store/Slices/DynamicContentSlice";
import * as Yup from "yup";
import AWS from '../../../../../aws';
import Dropzone from "react-dropzone";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import Image from 'next/image'
import camera from '../../../../../../public/assets/images/camera.svg'
import bin from '../../../../../../public/assets/images/bin.svg'
import plus from '../../../../../../public/assets/images/plus.svg'
import gallery from '../../../../../../public/assets/images/gallery.svg'
import Head from 'next/head'
const validationSchema = Yup.object().shape({
  home_First_Section: Yup.object().shape({
    first_title: Yup.string().required("title is required"),
    first_descriptions: Yup.string().required("descriptions is required"),
    first_Img: Yup.string().required(" image is required"),
    // first_button: Yup.string().required("button is required"),
  }),

  home_Second_Section: Yup.object().shape({
    Second_title: Yup.string().required("title is required"),
    Second_descriptions: Yup.string().required("descriptions is required"),
    Second_Img: Yup.string().required(" image is required"),
  }),
  home_Third_Section: Yup.object().shape({
    Third_title: Yup.string().required("title is required"),
    Third_descriptions_section: Yup.array()
      .of(
        Yup.object().shape({
          descriptions: Yup.string().required(' descriptions is Required'),
          image: Yup.string().required(" image is required"),
        })
      )

  })




});


export default function Home() {
  const [isOpen, setOpen] = useState(false);
  const userToggleForm = () => setOpen(!isOpen);
  const selecter = useSelector(getHomeData)
  const router = useRouter()
  const hideSidebar = isOpen ? ' xl:w-3/2 lg:w-3/4 md:w-3/5 w-full' : ' xl:w-full lg:w-full w-full';
  const dispatch = useDispatch()

  const initialValue = {
    home_First_Section: {
      first_title: '',
      first_descriptions: '',
      first_Img: '',
    },
    home_Second_Section: {
      Second_title: '',
      Second_descriptions: '',
      Second_Img: '',


    },

    home_Third_Section: {
      Third_title: '',
      Third_descriptions_section: [
        {
          image: "",
          descriptions: '',

        },
        {
          image: "",
          descriptions: '',
        }
      ]
    }
  }




  const uploadImageToS3 = async (file) => {
    const uploadParams = {
      Bucket: 'rajatfoodgienic',
      Key: file.name,
      Body: file,
      ACL: 'public-read',
    };

    const s3 = new AWS.S3();

    try {
      const data = await s3.upload(uploadParams).promise();
      const imageUrl = data.Location;
      console.log('Image uploaded successfully:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      return file
    }
  };

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div className={`content-area mt-4 ${hideSidebar}`}>
        <div className='title-section mb-5 px-8 py-4 bg-white rounded-xl shadow-light'>
          <h3 className='text-2xl font-bold'>Home</h3>
        </div>
        <div className='card1 w-full mb-16 flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
          <Formik initialValues={selecter || initialValue}
            enableReinitialize
            validationSchema={validationSchema}
            onSubmit={async (values) => {
              console.log("home valueesss == > ", values);
              const { first_Img } = values.home_First_Section;
              const { Second_Img } = values.home_Second_Section;
              const imageUrl = await uploadImageToS3(first_Img);
              const imageUrl2 = await uploadImageToS3(Second_Img);

              const updatedValues = {
                ...values,
                home_First_Section: {
                  ...values.home_First_Section,
                  first_Img: imageUrl,
                },
                home_Second_Section: {
                  ...values.home_Second_Section,
                  Second_Img: imageUrl2,
                },
              };
              const updatedDescriptions = await Promise.all(
                updatedValues.home_Third_Section.Third_descriptions_section.map(
                  async (item) => {
                    const { image } = item;
                    const imageUrl = await uploadImageToS3(image);
                    return {
                      ...item,
                      image: imageUrl,
                    };
                  }
                )
              );

              const updatedAboutThirdSection = {
                ...updatedValues.home_Third_Section,
                Third_descriptions_section: updatedDescriptions,
              };

              updatedValues.home_Third_Section = updatedAboutThirdSection

              console.log("homeAwsData=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", updatedValues)


              const value = {
                type: "home_page_sections",
                home_page_sections: updatedValues
              }
              const HomeData = await dispatch(updateAllDynamicData(value))

              if (HomeData && HomeData.payload && HomeData.payload.success) {
                toast.success(`${HomeData.payload.message}`)
                dispatch(getAllDynamicData())
                router.push("/admin/pages")
              } else {
                toast.error(`${HomeData.payload.data.message}`)
              }
              console.log("HomeData ", HomeData);
            }}
          >
            {(formikProps) => (
              <Form className="w-full">
                <div className="w-full">
                  <div className="mb-3 mt-7">
                    <h2 className="font-bold text-2xl mb-4 text-orange">Home First Section</h2>
                    <div className='px-8 bg-white shadow-light rounded-xl py-7 card1 w-full flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
                      <div className="w-full flex flex-wrap justify-between">
                        <div className="md:w-49% w-full">
                          <div className="w-full mb-3">
                            <label className="w-full font-bold" htmlFor="first_title">Title:</label>
                            <Field type="text" id="first_title" name="home_First_Section.first_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none" />
                            <div className="text-red">
                              <ErrorMessage name="home_First_Section.first_title" />
                            </div>
                          </div>
                          <div className="w-full mb-2">
                            <label htmlFor="first_descriptions" className="font-bold">Descriptions:</label>
                            <Field component="textarea" type="textarea" id="first_descriptions" name="home_First_Section.first_descriptions" placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none" />
                            
                            <div className="text-red">
                              <ErrorMessage name="home_First_Section.first_descriptions" />
                            </div>
                          </div>
                        </div>
                        <div className="md:w-49% w-full">
                          <label htmlFor="first_Img" className="font-bold">Image Upload:</label>
                          {/* <Field type="text" id="first_Img" name="home_First_Section.first_Img" placeholder="Enter Image url" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " /> */}
                          <Field name="home_First_Section.first_Img" >
                            {({ form }) => (
                              <Dropzone
                                onDrop={(acceptedFiles) =>
                                  form.setFieldValue(
                                    "home_First_Section.first_Img",
                                    acceptedFiles[0]
                                  )
                                }
                              >
                                {({ getRootProps, getInputProps }) => (
                                  <div {...getRootProps()} className="dropzone pt-1 w-full focus:outline-none">
                                    <input {...getInputProps()} />
                                    {form.values.home_First_Section.first_Img ? (
                                      <div className="relative w-full	border-2 border-gray-200 rounded h-44	">

                                        {form.values.home_First_Section.first_Img.path ?
                                          <Image
                                            src={URL.createObjectURL(
                                              form.values.home_First_Section.first_Img
                                            )}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          /> :
                                          <Image
                                            src={form.values.home_First_Section.first_Img}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          />
                                        }
                                        <div className="-top-3 -right-3 absolute bg-grey-light h-8 w-8 flex rounded-full border border-white items-center justify-center">
                                          <Image src={camera} alt="image" className="w-4	"/>
                                        </div>
                                      </div>
                                    ) : (
                                      <p className="border-2 border-gray-200 rounded">Drag &apos; drop an image here, or click to select a file</p>
                                    )}
                                  </div>
                                )}
                              </Dropzone>
                            )}
                          </Field>

                          <div className="text-red">
                            <ErrorMessage name="home_First_Section.first_Img" />
                          </div>
                        </div>
                        
                      </div>
                    </div>
                  </div>

                  <div className="mb-3 mt-7">    
                    <h2 className="font-bold text-2xl mb-4 text-orange">Home Second Section</h2>
                    <div className='px-8 bg-white shadow-light rounded-xl py-7 card1 w-full flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
                      <div className="w-full flex flex-wrap justify-between">
                        <div className="md:w-49% w-full">
                          <div className="w-full mb-3">
                            <label className="w-full font-bold" htmlFor="Second_title">Title:</label>
                            <Field type="text" id="Second_title" name="home_Second_Section.Second_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none" />
                            <div className="text-red">
                              <ErrorMessage name="home_Second_Section.Second_title" />
                            </div>
                          </div>
                          <div className="w-full mb-2">
                            <label htmlFor="Second_descriptions" className="font-bold">Descriptions:</label>
                            <Field component="textarea" type="textarea" id="Second_descriptions" name="home_Second_Section.Second_descriptions" placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none" />
                            
                            <div className="text-red">
                              <ErrorMessage name="home_Second_Section.Second_descriptions" />
                            </div>
                          </div>
                        </div>
                        <div className="md:w-49% w-full">
                          <label htmlFor="Second_Img" className="font-bold">Image Upload:</label>
                          {/* <Field type="text" id="Second_Img" name="home_Second_Section.Second_Img" placeholder="Enter Image url" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " /> */}

                          <Field name="home_Second_Section.Second_Img" >
                            {({ form }) => (
                              <Dropzone
                                onDrop={(acceptedFiles) =>
                                  form.setFieldValue(
                                    "home_Second_Section.Second_Img",
                                    acceptedFiles[0]
                                  )
                                }
                              >
                                {({ getRootProps, getInputProps }) => (
                                  <div {...getRootProps()} className="dropzone pt-1 w-full focus:outline-none">
                                    <input {...getInputProps()} />
                                    {form.values.home_Second_Section.Second_Img ? (
                                      <div className="relative w-full	border-2 border-gray-200 rounded h-44">

                                        {form.values.home_Second_Section.Second_Img.path ?
                                          <Image
                                            src={URL.createObjectURL(
                                              form.values.home_Second_Section.Second_Img
                                            )}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          /> :


                                          <Image
                                            src={form.values.home_Second_Section.Second_Img}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          />
                                        }
                                      </div>
                                    ) : (
                                      <p className="border-2 border-gray-200 rounded">Drag &apos; drop an image here, or click to select a file</p>
                                    )}
                                  </div>
                                )}
                              </Dropzone>
                            )}
                          </Field>

                          <div className="text-red">
                            <ErrorMessage name="home_Second_Section.Second_Img" />
                          </div>
                        </div>

                      </div>
                    </div>
                  </div>                    


                  <div className='card1 w-full'>
                    <div className="mb-3 mt-7">                    
                      <h2 className="font-bold text-2xl mb-4 text-orange">Home Third Section</h2>                
                      <div className="px-8 bg-white shadow-light rounded-xl py-7">
                        <label htmlFor="Third_title" className="font-bold">Title:</label>
                        <Field type="text" id="Third_title" name="home_Third_Section.Third_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " />
                        <div className="text-red">
                          <ErrorMessage name="home_Third_Section.Third_title" />
                        </div>
                      </div>
                    </div>                  
                      <div className="mb-3 mt-7">
                        <h3 className="font-bold text-2xl mb-4 text-orange">Descriptions</h3>
                        <FieldArray name="home_Third_Section.Third_descriptions_section">
                          {({ push, remove }) => (
                            <div className="flex flex-wrap justify-between">
                              {formikProps.values.home_Third_Section.Third_descriptions_section.map((type, index) => (
                                <div key={index} className="md:w-49% w-full mb-6 bg-white shadow-light rounded-xl p-6">
                                  <div>
                                    <div className="mb-3">
                                      <label htmlFor={`descriptions_${index}`} className="font-bold">Service Descriptions:</label>
                                      <Field type="text" id={`descriptions_${index}`} name={`home_Third_Section.Third_descriptions_section[${index}].descriptions`} placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " />
                                      <div className="text-red">
                                        <ErrorMessage name={`home_Third_Section.Third_descriptions_section[${index}].descriptions`} />
                                      </div>
                                    </div>
                                    <div>
                                      <label htmlFor={`image_${index}`} className="font-bold">Image Upload:</label>
                                      {/* <Field type="text" id={`image_${index}`} name={`home_Third_Section.Third_descriptions_section[${index}].image`} placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " /> */}

                                      <Field name={`home_Third_Section.Third_descriptions_section[${index}].image`} >
                                        {({ form }) => (
                                          <Dropzone
                                            onDrop={(acceptedFiles) =>
                                              form.setFieldValue(
                                                `home_Third_Section.Third_descriptions_section[${index}].image`,
                                                acceptedFiles[0]
                                              )
                                            }
                                          >
                                            {({ getRootProps, getInputProps }) => (
                                              <div {...getRootProps()} className="dropzone w-full focus:outline-none">
                                                <input {...getInputProps()} />
                                                {form.values.home_Third_Section.Third_descriptions_section[index].image ? (
                                                  <div className="relative w-full border-2 border-gray-200 rounded h-52">

                                                    {form.values.home_Third_Section.Third_descriptions_section[index].image.path ?
                                                      <Image
                                                        src={URL.createObjectURL(
                                                          form.values.home_Third_Section.Third_descriptions_section[index].image
                                                        )}
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      /> :
                                                      <Image
                                                        src={
                                                          form.values.home_Third_Section.Third_descriptions_section[index].image
                                                        }
                                                        alt="uploaded"
                                                        height={172}
                                                        width={691}
                                                        className="uploaded-image rounded w-full h-full object-cover"
                                                      />}
                                                  </div>
                                                ) : (
                                                  <div className="border-2 border-gray-200 bg-grey-light rounded p-2 mt-1 flex justify-center flex-col	items-center text-grey2 h-44">
                                                  <Image src={gallery} alt="gallery" className="w-20"/>
                                                  Drop image here and click to upload</div>
                                                )}
                                              </div>
                                            )}
                                          </Dropzone>
                                        )}
                                      </Field>


                                      <div className="text-red">
                                        <ErrorMessage name={`home_Third_Section.Third_descriptions_section[${index}].image`} />
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex justify-end">
                                    <button type="button" className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2" onClick={() => remove(index)}><Image src={bin} alt="delete" className="w-4	mr-2"/> Remove </button>
                                  </div>
                                </div>
                              ))}
                              <div className="w-full mb-3">
                                <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2" onClick={() => push({ descriptions: '', image: "" })}>
                                <Image src={plus} alt="delete" className="w-3.5	mr-2"/> Add Descriptions
                                </button>
                              </div>
                            </div>
                          )}
                        </FieldArray>
                      </div>
                    
                  </div>
                </div>
                <div className="flex justify-center p-8">
                  <button type="submit" className="bg-orange border	border-orange px-11 py-2 text-white rounded-3xl text-lg hover:bg-white hover:text-orange duration-700">Submit</button>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>
    </>
  )
}


Home.getLayout = function getLayout(page) {
  return (
    <>
      {page}
    </>
  )
}