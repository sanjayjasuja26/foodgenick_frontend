import { useState } from "react";
import AdminNAv from '@/components/forms/AdminNav';
import Head from 'next/head'
import { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';
import { useDispatch, useSelector } from "react-redux";
import { updateAllDynamicData, getaboutData, getAllDynamicData } from "@/app/auth/store/Slices/DynamicContentSlice";
import * as Yup from "yup";
import Dropzone from "react-dropzone";
import AWS from '../../../../../aws';
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import Image from 'next/image'
import camera from '../../../../../../public/assets/images/camera.svg'
import bin from '../../../../../../public/assets/images/bin.svg'
import plus from '../../../../../../public/assets/images/plus.svg'
import gallery from '../../../../../../public/assets/images/gallery.svg'
const validationSchema = Yup.object().shape({
  about_First_Section: Yup.object().shape({
    first_title: Yup.string().required("title is required"),
    first_descriptions: Yup.string().required("descriptions is required"),
    first_Img: Yup.string().required("image is required"),
    // first_button: Yup.string().required("button is required"),
  }),

  about_Second_Section: Yup.object().shape({
    Second_title: Yup.string().required("title is required"),
    Second_descriptions: Yup.string().required("descriptions is required"),
    Second_Img: Yup.string().required(" image is required"),
    Second_moreInfo: Yup.string().required("info is required"),
  }),
  about_Third_Section: Yup.object().shape({
    Third_title: Yup.string().required("title is required"),
    Third_descriptions_section: Yup.array()
      .of(
        Yup.object().shape({
          descriptions: Yup.string().required(' descriptions is Required'),
        })
      )

  })




});

export default function About() {
  const [isOpen, setOpen] = useState(false);
  const userToggleForm = () => setOpen(!isOpen);
  const hideSidebar = isOpen ? ' xl:w-3/2 lg:w-3/4 md:w-3/5 w-full' : ' xl:w-full lg:w-full w-full';
  const router = useRouter()
  const selecter = useSelector(getaboutData)
  console.log("selecterDataFFFFFFFFFFFFF", selecter)
  const dispatch = useDispatch()
  const uploadImageToS3 = async (file) => {
    const uploadParams = {
      Bucket: 'rajatfoodgienic',
      Key: file.name,
      Body: file,
      ACL: 'public-read',
    };

    const s3 = new AWS.S3();

    try {
      const data = await s3.upload(uploadParams).promise();
      const imageUrl = data.Location;
      console.log('Image uploaded successfully:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      return file;
    }
  };




  const initialValue = {
    about_First_Section: {
      first_title: selecter && selecter.about_First_Section && selecter.about_First_Section.first_title ? selecter.about_First_Section.first_title : "",
      first_descriptions: '',
      first_Img: '',
    },
    about_Second_Section: {
      Second_title: '',
      Second_descriptions: '',
      Second_Img: '',
      Second_moreInfo: '',

    },

    about_Third_Section: {
      Third_title: '',
      Third_descriptions_section: [
        {
          descriptions: '',

        },
        {
          descriptions: '',
        }
      ]
    }
  }



  return (
    <>
 <Head>
        <title>About</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div className={`content-area mt-4 ${hideSidebar}`}>
        <div className='title-section px-8 py-4 bg-white rounded-xl shadow-light'>
          <h3 className='text-2xl font-bold'>About</h3>
        </div>
        <div className='card1 w-full mb-5 flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
          <Formik
            initialValues={selecter || initialValue}
            enableReinitialize
            validationSchema={validationSchema}
            onSubmit={async (values) => {

              debugger
              try {
                const { first_Img } = values.about_First_Section;
                const { Second_Img } = values.about_Second_Section;
                const imageUrl = await uploadImageToS3(first_Img);
                const imageUrl2 = await uploadImageToS3(Second_Img);

                const updatedValues = {
                  ...values,
                  about_First_Section: {
                    ...values.about_First_Section,
                    first_Img: imageUrl,
                  },
                  about_Second_Section: {
                    ...values.about_Second_Section,
                    Second_Img: imageUrl2,
                  },
                };

                console.log("updatedValues==========>>>>>>", updatedValues);

                const value = {
                  type: "about_page_sections",
                  about_page_sections: updatedValues
                };
                const aboutData = await dispatch(updateAllDynamicData(value));
                if (aboutData && aboutData.payload && aboutData.payload.success) {
                  toast.success(`${aboutData.payload.message}`)
                  dispatch(getAllDynamicData())
                  router.push("/admin/pages")
                } else {
                  toast.error(`${aboutData.payload.data.message}`)
                }
              } catch (error) {
                console.error('Error:', error);
              }
            }}
          >
            {(formikProps) => (
              <Form className="w-full">
                <div className="w-full">
                  <div className="mb-3 mt-7">
                    <h2 className="font-bold text-2xl mb-4 text-orange">About First Section</h2>
                    <div className='px-8 bg-white shadow-light rounded-xl py-7 card1 w-full  flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
                      <div className="w-full flex flex-wrap justify-between">
                        <div className="md:w-49% w-full">
                          <div className="w-full mb-3">
                            <label className="w-full font-bold" htmlFor="first_title">Title:</label>
                            <Field type="text" id="first_title" name="about_First_Section.first_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none" />
                            <div className="text-red">
                              <ErrorMessage name="about_First_Section.first_title" />
                            </div>
                          </div>
                          <div className="w-full mb-2">
                            <label htmlFor="first_descriptions" className="font-bold">Descriptions:</label>
                            <Field component="textarea" type="textarea" id="first_descriptions" name="about_First_Section.first_descriptions" placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none" />
                            
                            <div className="text-red">
                              <ErrorMessage name="about_First_Section.first_descriptions" />
                            </div>
                          </div>
                        </div>
                        <div className="md:w-49% w-full">
                          <label htmlFor="first_Img" className="font-bold">Image Upload:</label>
                          {/* <Field type="text" id="first_Img" name="about_First_Section.first_Img" placeholder="Enter Image url" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " /> */}
                          <Field name="about_First_Section.first_Img" >
                            {({ form }) => (
                              <Dropzone
                                onDrop={(acceptedFiles) =>
                                  form.setFieldValue(
                                    "about_First_Section.first_Img",
                                    acceptedFiles[0]
                                  )
                                }
                              >
                                {({ getRootProps, getInputProps }) => (
                                  <div {...getRootProps()} className="dropzone py-1 w-full focus:outline-none">
                                    <input {...getInputProps()} />
                                    {form?.values.about_First_Section?.first_Img ? (
                                      <div className="relative w-full	border-2 border-gray-200 rounded h-44	">

                                        {form?.values.about_First_Section?.first_Img.path ?
                                          <Image
                                            src={URL.createObjectURL(
                                              form?.values.about_First_Section?.first_Img
                                            )}
                                            alt="uploaded"
                                            height={172}
                                              width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          /> :

                                          <Image
                                            src={form?.values.about_First_Section?.first_Img}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          />

                                        }
                                        <div className="-top-3 -right-3 absolute bg-grey-light h-8	w-8 flex rounded-full	border border-white items-center	justify-center">
                                          <Image src={camera} alt="image" className="w-4	"/>
                                        </div>
                                      </div>
                                    ) : (
                                      <p >Drag &apos; drop an image here, or click to select a file</p>
                                    )}
                                  </div>
                                )}
                              </Dropzone>
                            )}
                          </Field>
                          <div className="text-red">
                            <ErrorMessage name="about_First_Section.first_Img" />
                          </div>
                        </div>
                        
                      </div>
                    </div>
                  </div>

                  <div className="mb-3 mt-7">      
                    <h2 className="font-bold text-2xl mb-4 text-orange">About Second Section</h2>
                    <div className='px-8 bg-white shadow-light rounded-xl py-7 card1 w-full  flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center'>
                      <div className="w-full flex flex-wrap justify-between">
                        <div className="md:w-49% w-full">
                          <div className="mb-3">
                            <label className="w-full font-bold" htmlFor="Second_title">Title:</label>
                            <Field type="text" id="Second_title" name="about_Second_Section.Second_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none" />
                            <div className="text-red">
                              <ErrorMessage name="about_Second_Section.Second_title" />
                            </div>
                          </div>
                          <div className="w-full mb-2">
                            <label htmlFor="Second_descriptions" className="font-bold">Descriptions:</label>
                            <Field component="textarea" type="textarea" id="Second_descriptions" name="about_Second_Section.Second_descriptions" placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none" />
                            
                            <div className="text-red">
                              <ErrorMessage name="about_Second_Section.Second_descriptions" />
                            </div>
                          </div>
                          <div className="w-full mb-2">
                              <label htmlFor="Second_moreInfo" className="font-bold">More Info:</label>
                              <Field type="text" id="Second_moreInfo" name="about_Second_Section.Second_moreInfo" placeholder="Enter More Info" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " />
                              <div className="text-red">
                                <ErrorMessage name="about_Second_Section.Second_moreInfo" />
                              </div>
                          </div>
                        </div>
                        <div className="md:w-49% w-full">
                            <label htmlFor="Second_Img" className="font-bold">Image Upload:</label>
                            {/* <Field type="text" id="Second_Img" name="about_Second_Section.Second_Img" placeholder="Enter Image url" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " /> */}
                            <Field name="about_Second_Section.Second_Img">
                              {({ form }) => (
                                <Dropzone
                                  onDrop={(acceptedFiles) =>
                                    form.setFieldValue(
                                      "about_Second_Section.Second_Img",
                                      acceptedFiles[0]
                                    )
                                  }
                                >
                                  {({ getRootProps, getInputProps }) => (
                                    <div {...getRootProps()} className="dropzone w-full pt-1 focus:outline-none">
                                      <input {...getInputProps()} />
                                      {form.values.about_Second_Section.Second_Img ? (

                                        <div className="relative w-full	border-2 border-gray-200 rounded h-64">
                                          {form?.values?.about_Second_Section?.Second_Img.path ?

                                            <Image
                                              src={URL.createObjectURL(
                                                form.values.about_Second_Section.Second_Img
                                              )}
                                              alt="uploaded"
                                              height={272}
                                              width={691}
                                              className="uploaded-image rounded w-full h-full object-cover"
                                            /> :
                                            <Image
                                              src={form.values.about_Second_Section.Second_Img}
                                              alt="uploaded"
                                              height={272}
                                              width={691}
                                              className="uploaded-image rounded w-full h-full object-cover"
                                            />
                                          }
                                          <div className="-top-3 -right-3 absolute bg-grey-light h-8 w-8 flex rounded-full border border-white items-center justify-center">
                                            <Image src={camera} alt="image" className="w-4	"/>
                                          </div>
                                        </div>
                                      ) : (
                                        <p className="border-2 border-gray-200 rounded">Drag &apos; drop an image here, or click to select a file</p>
                                      )}
                                    </div>
                                  )}
                                </Dropzone>
                              )}
                            </Field>
                            <div className="text-red">
                              <ErrorMessage name="about_Second_Section.Second_Img" />
                            </div>
                        </div>
                        
                      </div>
                    </div>
                  </div>                      

                  
                  <div className='card1 w-full'>
                    <div className="mb-3 mt-7">
                      <h2 className="font-bold text-2xl mb-4 text-orange">About Third Section</h2>
                      <div className="px-8 bg-white shadow-light rounded-xl py-7">
                        <div className="">
                          <label htmlFor="Third_title" className="font-bold">Title:</label>
                          <Field type="text" id="Third_title" name="about_Third_Section.Third_title" placeholder="Enter Title" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none " />
                          <div className="text-red">
                            <ErrorMessage name="about_Third_Section.Third_title" />
                          </div>
                        </div>
                      </div>  
                    </div>      
                    
                                        
                      <div className="mb-3 mt-7">
                        <h3 className="font-bold text-2xl mb-4 text-orange">Descriptions</h3>
                        <FieldArray name="about_Third_Section.Third_descriptions_section">
                          {({ push, remove }) => (
                            <div className="">
                              {formikProps.values.about_Third_Section.Third_descriptions_section.map((type, index) => (
                                <div key={index} className="w-full mb-6 bg-white p-6 rounded-lg">
                                  <div>
                                    <div>
                                      <label htmlFor={`descriptions_${index}`} className="font-bold">Descriptions:</label>
                                      <Field component="textarea" type="text" id={`descriptions_${index}`} name={`about_Third_Section.Third_descriptions_section[${index}].descriptions`} placeholder="Enter Descriptions" className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none" />
                                      
                                      <div className="text-red">
                                        <ErrorMessage name={`about_Third_Section.Third_descriptions_section[${index}].descriptions`} />
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex justify-end">
                                    <button type="button" className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2" onClick={() => remove(index)}><Image src={bin} alt="delete" className="w-4	mr-2"/>Remove</button>
                                  </div>
                                </div>
                              ))}
                              <div className="w-full mb-3">
                                <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2" onClick={() => push({ descriptions: '' })}>
                                <Image src={plus} alt="delete" className="w-3.5	mr-2"/> Add Descriptions
                                </button>
                              </div>
                            </div>
                          )}
                        </FieldArray>
                      </div>
                    
                  </div>
                </div>
                <div className="flex justify-center p-8">
                  <button type="submit" className="bg-orange border	border-orange px-11 py-2 text-white rounded-3xl text-lg hover:bg-white hover:text-orange duration-700">Submit</button>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>

    </>
  )
}


About.getLayout = function getLayout(page) {
  return (
    <>
      {page}
    </>
  )
}