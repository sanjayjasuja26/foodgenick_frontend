import { useState } from "react";
import AdminNAv from "@/components/forms/AdminNav";
import { Formik, Field, Form, ErrorMessage, FieldArray } from "formik";
import { useDispatch, useSelector } from "react-redux";
import { updateAllDynamicData, getPriceData,getAllDynamicData,} from "@/app/auth/store/Slices/DynamicContentSlice";
import Dropzone from "react-dropzone";
import * as Yup from "yup";
import AWS from "../../../../../aws";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import Image from "next/image";
import bin from "../../../../../../public/assets/images/bin.svg";
import plus from "../../../../../../public/assets/images/plus.svg";
import Head from 'next/head'
const validationSchema = Yup.object().shape({
  price_First_Section: Yup.object().shape({
    first_title: Yup.string().required("Title is required"),
    first_descriptions: Yup.string().required("Descriptions is required"),
    first_Img: Yup.string().required("Image is required"),
  }),

  price_Second_Section: Yup.object().shape({
    Second_title: Yup.string().required("title is required"),
    Second_descriptions: Yup.string().required("descriptions is required"),
    Plans: Yup.array().of(
      Yup.object().shape({
        plan: Yup.string().required("Plan is required"),
        type: Yup.string().required("Type is required"),
        features: Yup.array().of(
          Yup.object().shape({
            item: Yup.string().required("Item is required"),
          })
        ),
      })
    ),
  }),
});

export default function Price() {
  const [isOpen, setOpen] = useState(false);
  const userToggleForm = () => setOpen(!isOpen);
  const router = useRouter();
  const hideSidebar = isOpen ? 'xl:w-3/2 lg:w-3/4 md:w-3/5 w-full' : ' xl:w-full lg:w-full w-full';
  const dispatch = useDispatch();

  const uploadImageToS3 = async (file) => {
    const uploadParams = {
      Bucket: "rajatfoodgienic",
      Key: file.name,
      Body: file,
      ACL: "public-read",
    };

    const s3 = new AWS.S3();

    try {
      const data = await s3.upload(uploadParams).promise();
      const imageUrl = data.Location;
      console.log("Image uploaded successfully:", imageUrl);
      return imageUrl;
    } catch (error) {
      console.error("Error uploading image:", error);
      return file;
    }
  };

  const initialValue = {
    price_First_Section: {
      first_title: "",
      first_descriptions: "",
      first_Img: "",
    },
    price_Second_Section: {
      Second_title: "",
      Second_descriptions: "",
      Plans: [
        {
          plan: "",
          type: "",
          moreInfo: "",
          features: [{ item: "" }],
        },
      ],
    },
  };

  const selecter = useSelector(getPriceData);
  console.log("selecterData", selecter);

  return (
    <>
    <Head>
        <title>Price</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <div className={`content-area mt-4 ${hideSidebar}`}>
        <div className="title-section px-8 py-4 bg-white rounded-xl shadow-light">
          <h3 className="text-2xl font-bold">Price</h3>
        </div>
        <div className="card1 w-full mb-5 flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center">
          <Formik
            initialValues={selecter ||initialValue}
            enableReinitialize
            validationSchema={validationSchema}
            onSubmit={async (values) => {
              console.log("price");
              console.log("price_First_Sectionconsole", values);

              try {
                const { first_Img } = values.price_First_Section;
                const imageUrl = await uploadImageToS3(first_Img);

                const updatedValues = {
                  ...values,
                  price_First_Section: {
                    ...values.price_First_Section,
                    first_Img: imageUrl,
                  },
                };

                const value = {
                  type: "price_page_sections",
                  price_page_sections: updatedValues
                };

                console.log("priceData ", value);
                const priceData = await dispatch(updateAllDynamicData(value));

                if (priceData && priceData.payload && priceData.payload.success) {
                  toast.success(`${priceData.payload.message}`)
                  dispatch(getAllDynamicData())
                  router.push("/admin/pages")
                } else {
                  toast.error(`${priceData.payload.data.message}`)
                }

              } catch (error) {
                console.error('Error:', error);
              }


            }}
          >
            {(formikProps) => (
              <Form className="w-full">
                <div className="mb-3 mt-7">
                  <h2 className="font-bold text-2xl mb-4 text-orange text-left">Price First Section</h2>

                  <div className="md:px-8 px-5 bg-white shadow-light rounded-xl md:py-7 py-5 card1 w-full mb-5 rounded-lg flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between justify-center sm:flex sm:text-left grid text-center">
                    <div className="w-full flex flex-wrap justify-between">
                      <div className="md:w-49% w-full">
                        <div className="w-full mb-3 text-left">
                          <label className="w-full font-bold" htmlFor="first_title">
                            Title:
                          </label>
                          <Field
                            type="text"
                            id="first_title"
                            name="price_First_Section.first_title"
                            placeholder="Enter Title"
                            className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none"
                          />
                          <div className="text-red">
                            <ErrorMessage name="price_First_Section.first_title" />
                          </div>
                        </div>
                        <div className="w-full mb-2 text-left">
                          <label htmlFor="first_descriptions" className="font-bold">
                            Descriptions:
                          </label>
                          <Field
                            component="textarea"
                            type="textarea"
                            id="first_descriptions"
                            name="price_First_Section.first_descriptions"
                            placeholder="Enter Descriptions"
                            className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none"
                          />

                          <div className="text-red">
                            <ErrorMessage name="price_First_Section.first_descriptions" />
                          </div>
                        </div>
                      </div>
                      <div className="md:w-49% w-full text-left">
                        <div className="w-full">
                          <label htmlFor="first_Img" className="font-bold">Image:</label>
                          <Field name="price_First_Section.first_Img">
                            {({ form }) => (
                              <Dropzone
                                onDrop={(acceptedFiles) =>
                                  form.setFieldValue(
                                    "price_First_Section.first_Img",
                                    acceptedFiles[0]
                                  )
                                }
                              >
                                {({ getRootProps, getInputProps }) => (
                                  <div
                                    {...getRootProps()}
                                    className="dropzone w-full focus:outline-none"
                                  >
                                    <input {...getInputProps()} />
                                    {form?.values.price_First_Section?.first_Img ? (
                                      <div className="relative w-full	border-2 border-gray-200 rounded h-44	">
                                        {form?.values.price_First_Section
                                          ?.first_Img?.path ? (
                                          <Image src={URL.createObjectURL( form?.values.price_First_Section
                                                ?.first_Img
                                            )}
                                            alt="uploaded"
                                            height={172}
                                            width={691}
                                            className="uploaded-image rounded w-full h-full object-cover"
                                          />
                                        ) : (
                                          <Image
                                            src={
                                              form?.values.price_First_Section
                                                ?.first_Img
                                            }
                                            alt="uploaded"
                                            height={172}
                                              width={691}
                                              className="uploaded-image rounded w-full h-full object-cover"
                                          />
                                        )}
                                      </div>
                                    ) : (
                                      <p className="p-2 border-2 border-gray-200 rounded">
                                        Drag drop an image here, or click to
                                        select a file
                                      </p>
                                    )}
                                  </div>
                                )}
                              </Dropzone>
                            )}
                          </Field>
                          <div className="text-red">
                            <ErrorMessage name="price_First_Section.first_Img" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="mb-3 mt-7 text-left">
                  <h2 className="font-bold text-2xl mb-4 text-orange">Price Second Section</h2>
                  <div className="md:px-8 px-5 bg-white shadow-light rounded-xl md:py-7 py-5 card1 mb-16 w-full mb-5 rounded-lg flex xl:flex-nowrap lg:flex-wrap md:flex-wrap sm:flex-wrap flex-wrap items-center xl:justify-between  lg:justify-between md:justify-between md:flex md:text-start sm:justify-between sm:flex sm:text-left grid text-center">
                    <div className="w-full">
                      <div className="mb-3 text-left">
                        <label htmlFor="Second_title" className="font-bold">Title:</label>
                        <Field
                          type="text"
                          id="Second_title"
                          name="price_Second_Section.Second_title"
                          placeholder="Enter Title"
                          className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none"
                        />
                        <div className="text-red">
                          <ErrorMessage
                            name="price_Second_Section.Second_title"
                          />
                        </div>
                      </div>
                      <div className="text-left">
                        <label htmlFor="Second_descriptions" className="font-bold">
                          Descriptions:
                        </label>
                        <Field
                          component="textarea"
                          type="text"
                          id="Second_descriptions"
                          name="price_Second_Section.Second_descriptions"
                          placeholder="Enter Descriptions"
                          className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none"
                        />

                        <div className="text-red">
                          <ErrorMessage
                            name="price_Second_Section.Second_descriptions"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="mb-3 mt-7 text-left">
                  <h3 className="font-bold text-2xl mb-4 text-orange">Payment Section</h3>
                  <FieldArray name="price_Second_Section.Plans">
                    {({ push, remove }) => (
                      <div className="">
                        {formikProps.values.price_Second_Section.Plans.map(
                          (type, index) => (
                            <div key={index} className="w-full mb-6 bg-white p-6 p-5 rounded-lg">
                              <h3 className="mb-6 text-2xl font-bold border-b pb-3 text-left">
                                Plan{index + 1}
                              </h3>

                              <div className="flex justify-between	flex-wrap">
                                <div className="md:w-49% w-full">
                                  <div className="mb-3 text-left">
                                      <label htmlFor={`plan_${index}`} className="font-bold">Plan:</label>
                                      <Field
                                        type="text"
                                        id={`plan_${index}`}
                                        name={`price_Second_Section.Plans[${index}].plan`}
                                        placeholder="Enter plan"
                                        className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none"
                                      />
                                      <div className="text-red">
                                        <ErrorMessage
                                          name={`price_Second_Section.Plans[${index}].plan`}
                                        />
                                      </div>
                                  </div>
                                </div>
                                <div className="md:w-49% w-full">
                                  <div className="mb-3 text-left">
                                    <label htmlFor={`type_${index}`} className="font-bold">Type:</label>
                                    <Field
                                      type="text"
                                      id={`type_${index}`}
                                      name={`price_Second_Section.Plans[${index}].type`}
                                      placeholder="Enter type"
                                      className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none"
                                    />
                                    <div className="text-red">
                                      <ErrorMessage
                                        name={`price_Second_Section.Plans[${index}].type`}
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div>
                                <div className="mb-3 text-left">
                                  <label htmlFor={`moreInfo_${index}`} className="font-bold">
                                    More Info:
                                  </label>
                                  <Field
                                   component="textarea"
                                    type="text"
                                    id={`moreInfo_${index}`}
                                    name={`price_Second_Section.Plans[${index}].moreInfo`}
                                    placeholder="Enter more info"
                                    className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none h-24 resize-none"
                                  />
                                  <div className="text-red">
                                    <ErrorMessage
                                      name={`price_Second_Section.Plans[${index}].moreInfo`}
                                    />
                                  </div>
                                </div>
                              </div>

                              <div className="bg-white shadow-light rounded-xl mt-6">
                                <h3 className="mb-6 text-2xl font-bold border-b pb-3 text-left">
                                  Features
                                </h3>
                                <FieldArray
                                  name={`price_Second_Section.Plans[${index}].features`}
                                >
                                  {({ push, remove }) => (
                                    <div className="flex flex-wrap justify-between">
                                      {type.features &&
                                        type.features.length > 0 &&
                                        type.features.map((feature, ind) => (
                                          <div
                                            key={ind}
                                            className="md:w-32% w-full mb-6"
                                          >
                                            <div className="relative">
                                              <div className="mb-3 text-left">
                                                <label htmlFor={`item_${ind}`} className="font-bold">
                                                  Item:
                                                </label>
                                                <Field
                                                  type="text"
                                                  id={`item_${ind}`}
                                                  name={`price_Second_Section.Plans[${index}].features[${ind}].item`}
                                                  placeholder="Enter plan"
                                                  className="p-2 border-2 border-gray-200 rounded w-full focus:outline-none"
                                                />
                                                <div className="text-red">
                                                  <ErrorMessage
                                                    name={`price_Second_Section.Plans[${index}].features[${ind}].item`}
                                                  />
                                                </div>
                                              </div>
                                              <div className="absolute top-6 right-0 mt-0.5">
                                                <button
                                                  type="button"
                                                  className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded"
                                                  onClick={() => remove(ind)}
                                                >
                                                  <Image
                                                    src={bin}
                                                    alt="delete"
                                                    className="w-4 "
                                                  />{" "}
                                                </button>
                                            </div>
                                            </div>
                                            
                                          </div>
                                        ))}
                                      <div className="flex justify-end w-full">
                                        <div className="mr-2">
                                          <button type="button" className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2"
                                            onClick={() => push({ item: "" })}
                                          >
                                            <Image
                                              src={plus}
                                              alt="delete"
                                              className="w-3.5 mr-2"
                                            />{" "}
                                            Add features
                                          </button>
                                        </div>
                                        <div className="">
                                          <button
                                            type="button"
                                            className="duration-700 hover:bg-black bg-orange flex items-center justify-center px-5 h-10 text-white rounded-3xl mt-2"
                                            onClick={() => remove(index)}
                                          >
                                            <Image
                                              src={bin}
                                              alt="delete"
                                              className="w-4 mr-2"
                                            />{" "}
                                            Remove
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                  )}
                                </FieldArray>
                              </div>
                              
                            </div>
                          )
                        )}
                        <div className="w-full mb-3 text-right">
                          <button
                            type="button"
                            className="duration-700 hover:bg-orange ml-auto	bg-black flex items-center justify-center h-10 px-5 text-base text-white rounded-3xl mt-2"
                            onClick={() =>
                              push({
                                plan: "",
                                type: "",
                                moreInfo: "",
                                features: [{ item: "" }],
                              })
                            }
                          >
                            <Image
                              src={plus}
                              alt="delete"
                              className="w-3.5 mr-2"
                            />{" "}
                            Add Plan
                          </button>
                        </div>
                      </div>
                    )}
                  </FieldArray>
                </div>
                <div className="flex justify-center p-8">
                  <button type="submit" className="bg-orange border	border-orange px-11 py-2 text-white rounded-3xl text-lg hover:bg-white hover:text-orange duration-700">
                    Submit
                  </button>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>
    </>
  );
}

Price.getLayout = function getLayout(page) {
  return <>{page}</>;
};
