import Head from 'next/head'
import Image from 'next/image'
import { motion } from "framer-motion"
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Link from 'next/link'
import aboutbanner from '/public/assets/images/aboutbanner.png'
import dots2 from '/public/assets/images/dots2.png'
import axios from 'axios'
import Cookies from 'js-cookie'
import { useRouter } from 'next/router';
import { useDispatch, useSelector } from 'react-redux'
import { useEffect, useState } from 'react'
import { getAllDynamicData, getPriceData } from '@/app/auth/store/Slices/DynamicContentSlice'
import { getuserData } from '@/app/auth/store/LoginSlice'
import { constants } from '@/common/Constant'
import socketIOClient from 'socket.io-client'
import { toast } from 'react-toastify'


const inter = Inter({ subsets: ['latin'] })

export default function Pricing() {
  const router = useRouter()
  const token = Cookies.get("token");
  const socket = socketIOClient('https://foodgienic.com/');
  const [testState, setTestState] = useState([])


  const dispatch = useDispatch()
  const selecter = useSelector(getPriceData)


  const userSelecter = useSelector(getuserData)


  let priceData = []
  let newData = []
  priceData.push(selecter)

  useEffect(() => {
    getApi()
  }, [])

  useEffect(() => {
    let array1, array2;
    let bigArray, shortArray;
    if (selecter && selecter.price_Second_Section && selecter.price_Second_Section.Plans.length > 0) {
      if (selecter.price_Second_Section.Plans.length > 0) {
        array1 = selecter.price_Second_Section.Plans[0].features;
        array2 = selecter.price_Second_Section.Plans[1].features;
      }
      if (array1.length > array2.length) {
        bigArray = array1;
        shortArray = array2;
      } else {
        bigArray = array2;
        shortArray = array1;
      }
    
      for (let i = 0; i <= ((bigArray.length - shortArray.length) + 1); i++) {
        shortArray = [...shortArray, { item: 'x' }];
      }
      let array = []
      array = JSON.parse(JSON.stringify(priceData));
      array[0].price_Second_Section.Plans[0].features = shortArray;
      array[0].price_Second_Section.Plans[1].features = bigArray;
      priceData = []
      newData.push(array[0])
      setTestState(newData)
    }

  }, []);

  // priceData.push(newData[0])

  useEffect(() => {
    socket.on('payment_response', (data) => {

      toast.success('Payment Success')
    
    });
    socket.emit('send_message', 'Hello, server!');
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);



  const getApi = async () => {
    const data = await dispatch(getAllDynamicData())
  }





  const paynow = (id, amount, type) => {
    
    axios.post(`${constants.URLLOCAL}/user/payment`, {
      "amount": amount,
      "type": type
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
      .then(function (response) {
       
        let res = response.data.data
    
        let newOpt = {
          key_id: 'rzp_test_zh6NslsyUOYBjP',
          amount: res.amount,
          currency: res.currency,
          name: userSelecter?.user?.data?.user?.firstname,
          order_id: res.id,
          handler: function (response) {
         
            // if (response.razorpay_payment_id) {
            //   toast.success('Payment Success')
            // }
          },
          prefill: {
            contact: userSelecter?.user?.data?.user?.phone,
            name: userSelecter?.user?.data?.user?.firstname,
            email: userSelecter?.user?.data?.user?.email
          },
          notes: {
            discription: "Test YYY"
          },
          theme: {
            color: "red"
          }
        }
       
        let rozorpayObj = new Razorpay(newOpt)
     
        document.getElementById(`${id}`).onclick = (e) => {
        
          rozorpayObj.open();
          e.preventDefault();
        }
      })
      .catch(function (error) {
        console.log(error);
      });
  }


  const getlogin = () => {
    router.push("/login")
  }



  return (
    <>
      <Head>
        <title>Pricing</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
        <script src="https://checkout.razorpay.com/v1/checkout.js" async></script>
      </Head>
      <main>
        {testState && testState.length > 0 && testState.map((ele, index) => {
          return (
            <div key={index}>
              <section className='md:bg-right md:bg-no-repeat 2xl:bg-924 xl:bg-680 lg:bg-590 md:bg-460 relative xl:py-32 lg:py-20 md:py-14 py-14 '  >
                <div className='lg:max-w-xxxl md:max-w-xxxl mx-auto  pl-7'>
                  <div className='flex flex-wrap items-center	justify-between relative'>
                    
                      <div className='lg:w-5/12	md:w-5/12 '>
                        {/* <h1 className='font-poppins xl:text-6xl font-bold text-dark lg:mb-6 md:mb-2 mb-2.5 md:text-4xl lg:text-5xl text-3xl relative lg:before:content-[attr(before)] before:absolute before:bg-price-text xl:before:h-52 lg:before:h-28 before:h-16 2xl:before:w-500 xl:before:w-500	lg:before:w-96 md:before:w-80	md:before:h-52 sm:before:w-56 before:w-48 before:bg-10% before:bg-no-repeat before:-z-10 xl:before:-top-10  lg:before:-top-10 md:before:-top-10 sm:before:-top-8 before:-top-6 lg:before:-left-2 md:before:left-0'><span className='text-yellow'>R</span>each <span className="text-yellow">2x</span> more <span className='text-yellow'>p</span>rospects</h1> */}
                        <h1 className='font-poppins xl:text-6xl font-bold text-dark lg:mb-6 md:mb-2 mb-2.5 md:text-4xl lg:text-5xl text-3xl relative lg:before:content-[attr(before)] before:absolute before:bg-price-text xl:before:h-52 lg:before:h-28 before:h-16 2xl:before:w-500 xl:before:w-500	lg:before:w-96 md:before:w-80	md:before:h-52 sm:before:w-56 before:w-48 before:bg-10% before:bg-no-repeat before:-z-10 xl:before:-top-10  lg:before:-top-10 md:before:-top-10 sm:before:-top-8 before:-top-6 lg:before:-left-2 md:before:left-0'>{ele?.price_First_Section?.first_title}</h1>
                        <p className='font-poppins lg:text-xl text-sm md:text-lg font-medium text-dark lg:leading-9 md:leading-8 leading-6 text-dark mb-6'>{ele?.price_First_Section?.first_descriptions}</p>


                      </div>
                      <div className='lg:w-7/12 md:w-7/12 relative z-10 lg:-mr-3.5	-mr-2 ps-3 pt-4'>
                        <Image
                          alt="Logo"
                          src={ele?.price_First_Section?.first_Img}
                          height={429}
                          width={800}

                        />
                      </div>
                   
                  </div>
                </div>
              </section>

              <section className='relative xl:pt-44	xl:pb-36 lg:pt-44	lg:pb-36 md:pt-44	md:pb-36 pt-40 pb-24 bg-aboutbg bg-no-repeat bg-cover'>
                <div className='lg:max-w-xxxl md:max-w-xxxl mx-auto px3.5 new'>
                  
                    <h3 className='font-poppins xl:text-6xl lg:text-5xl md:text-4xl font-bold text-dark text-center z-10 relative lg:before:content-[attr(before)] before:absolute before:bg-price-plan xl:before:h-52 2xl:before:w-l lg:before:h-28 md:before:h-20 xl:before:w-500 lg:before:w-96 md:before:w-72 before:w-72 before:h-20 before:bg-10% before:bg-no-repeat xl:before:-top-8 before:-top-4  md:before:-top-6 before:-left-2.5 before:right-0 before:left-0 before:mx-auto before:-z-10 text-4xl mb-8'>{ele?.price_Second_Section?.Second_title}</h3>
                    <p className='font-poppins md:text-3xl text-xl	font-semibold  text-dark text-center'>{ele?.price_Second_Section?.Second_descriptions}</p>
                    <div className='flex flex-wrap justify-center xl:pt-24	lg:pt-24 md:pt-20  pt-16 px-6 sm:px-4'>
                      {ele && ele?.price_Second_Section?.Plans && ele.price_Second_Section.Plans.length > 0 && ele.price_Second_Section.Plans.map((element, ind) => {
                        return (
                        <div key={index} className='ada xl:w-30% xl:px-2.5 lg:w-2/5 lg:px-2.5 md:w-1/2 sm:w-1/2 md:px-2.5 sm:px-2.5 w-full lg:mb-0 md:mb-6 mb-6 '>
                            <div className='bg-white rounded-lg	border-t-4 border-black drop-shadow-lg xl:min-h-587 lg:min-h-587 h-full'>
                              <div className=''>
                                <div className='bg-yellow h-40 w-full relative z-10 text-center text-white'>
                                  <span className="absolute left-0 right-0 m-auto top-138 inset-0 z-0 origin-center rotate-45 h-11 w-11 md:block hidden bg-yellow  border-r-8 border-l-8 border-yellow">
                                  </span>
                                  <h4 className='font-poppins font-normal pt-4 text-2xl mb-2'>{element.plan}</h4>
                                  <h3 className='font-poppins text-3xl font-semibold pt-2'>{`( ${element.type})`}</h3>
                                  {element.moreInfo ? <h3 className='font-poppins text-xs text-lightgrey mt-2 text-white font-normal'>{`( ${element.moreInfo})`}</h3> : null}
                                </div>

                                <ul className='px-4 pt-10 pb-3'>
                                  {element && element.features && element.features.map((item, index) => {
                                    return (
                                      <>
                                        {item && item.item && item.item == "x" ?
                                          <li className=' bg-no-repeat	bg-left	 mb-2.5	font-poppins text-base font-semibold mt-1.5 lg:h-9 sm:h-11 sm:pb-0 pb-2.5 text-black border-b border-slate-300 flex justify-center items-center text-center'><span className='px-3 py-3 block bg-no-repeat bg-mark bg-left-center bg-20 '></span></li> :

                                          <li className=' bg-no-repeat bg-left mb-2.5 font-poppins text-base font-semibold mt-1.5 lg:h-9 sm:h-11 text-black border-b border-slate-300 flex justify-center items-center text-center sm:pb-0 pb-2.5'>{item.item} </li>}
                                      </>
                                    )
                                  })}
                                </ul>
                              </div>
                              <div className='text-center pb-3'>

                                <button className='group inline-block font-poppins text-base font-semibold border border-black rounded-lg ease-in duration-500 bg-white hover:bg-yellow hover:text-white hover:border-yellow py-2 px-5 mb-4' id={`rzp-button${ind}`} onClick={() => { !token ? getlogin() : paynow(`rzp-button${ind}`, "35400", element.plan) }}>Pay Now</button>
                              </div>
                            </div>
                        </div>
                        )
                      })}
                    </div>
                 
                </div>
                <div className='absolute left-0	 xl:-top-28 md:-top-20	-left-1.5	hidden md:block'>
                  <Image
                    alt="Dots"
                    src={dots2}
                    className='md:w-3/5 xl:w-full md:mr-auto md:w-10/12 xl:m-0'
                  />
                </div>
              </section>
            </div>
          )
        })}


      </main>
    </>
  )
}
